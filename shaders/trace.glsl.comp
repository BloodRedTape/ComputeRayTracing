#version 440

struct Sphere{
    vec3 Position;
    float Radius;
    vec4 Color;
};

struct Ray{
    vec3 Origin;
    vec3 Direction;
};

Ray MakeRay(vec3 origin, vec3 direction){
    return Ray(origin, normalize(direction));
}

vec3 At(in Ray ray, float t){
    return ray.Origin + ray.Direction * t;
}

vec3 GetBackgroundColor(vec2 ndc){
    return vec3(0.2, 0.8, 1.0);
}

vec3 GetNormalColor(vec3 normal){
    return normal / 2 + vec3(0.5);
}

int Seed = int(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * 2342344654);
int RandMax = 32767;

int RandInt() // RAND_MAX assumed to be 32767
{
    Seed = Seed * 645615245 + 7919;
    return int(uint(Seed/65536) % 32768);
}

float RandFloat(){
    return RandInt() / float(RandMax);
}

vec3 RandVec3(){
    return normalize((vec3(RandFloat(), RandFloat(), RandFloat()) - vec3(0.5)) * 2);
}

void Intersect(in Ray ray, in Sphere sphere, out int roots, out float t, out vec3 normal){
    vec3 o = ray.Origin - sphere.Position;
    float a = dot(ray.Direction, ray.Direction);
    float b = 2.0*dot(o, ray.Direction);
    float c = dot(o, o) - (sphere.Radius * sphere.Radius);

    float d = b*b - 4.0*a*c;

    roots = int(d > 0);

    if(roots > 0){
        float t1 = (b - sqrt(d))/(-2*a);
        float t2 = (b + sqrt(d))/(-2*a);

        t = min(max(t1, 0), max(t2, 0));

        vec3 intersection = At(ray, t);
        normal = normalize((intersection - sphere.Position) * vec3(1, 1, -1));
    }
}

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1)in;

layout(std140, binding = 0)buffer u_SpheresBuffer{
    int SpheresCount;
    Sphere Spheres[];
};

layout(rgba8, binding = 1)uniform writeonly image2D u_Output;
const vec3 CameraPosition = vec3(0, 0, 0);
const float FocalLength = 1.0;
const int InteractionsCount = 40;
vec2 Ndc;

vec3 Trace(Ray ray){
    vec3 out_color = vec3(1.0);

    for(int i = 0; i<InteractionsCount; i++){
        float nearest_t = 999999999999999999999.9;
        vec3 nearest_color = vec3(1.0, 1.0, 1.0);
        Ray nearest_ray = ray;
        bool hit = false;

        float mult = pow(0.5, i);

        for(int j = 0; j<SpheresCount; j++){
            int roots;
            float t;
            vec3 normal;

            Intersect(ray, Spheres[j], roots, t, normal);

            if(roots > 0 && 0 < t && t < nearest_t){
                nearest_t = t;
                nearest_color = Spheres[j].Color.rgb;

                nearest_ray = MakeRay(At(ray, t), normal + RandVec3());
                hit = true;
            }
        }

        out_color = nearest_color * mult + out_color * (1.0 - mult);

        ray = nearest_ray;
    }

    return out_color;
}


void main(){
    const vec2 output_size = imageSize(u_Output);
    const ivec2 coord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    const float aspect = float(output_size.x)/float(output_size.y);
    Ndc = (vec2(coord) / output_size.y - vec2(aspect/2, 0.5)) * 2.0;

    const vec3 ray_direction = vec3(Ndc.xy, 1.0);

    const Ray ray = MakeRay(CameraPosition, ray_direction);

    //vec4 color = vec4(ndc.xy, 0, 1);
    //vec3 out_color = GetBackgroundColor(Ndc);
    vec3 out_color = Trace(ray);

    imageStore(u_Output, coord, vec4(out_color.xyz, 1.0));
}

